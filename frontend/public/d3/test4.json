{
  "name": "FinanceLineChart",
  "d3": "function createChart(csvString) {\n  // Parse the CSV string into an array of objects\n  const data = d3.csvParse(csvString);\n\n  // Specify the chart's dimensions.\n  const width = 928;\n  const height = 500;\n  const marginTop = 20;\n  const marginRight = 30;\n  const marginBottom = 30;\n  const marginLeft = 40;\n\n  // Parse the date and close price\n  const parseDate = d3.timeParse('%Y-%m-%d');\n  data.forEach(d => {\n    d.Date = parseDate(d.Date);\n    d.Close = +d.Close;\n  });\n\n  // Group the data by company\n  const groupedData = d3.group(data, d => d.Company);\n\n  // Create the positional scales.\n  const x = d3.scaleTime()\n    .domain(d3.extent(data, d => d.Date))\n    .range([marginLeft, width - marginRight]);\n\n  const y = d3.scaleLinear()\n    .domain([0, d3.max(data, d => d.Close)]).nice()\n    .range([height - marginBottom, marginTop]);\n\n  // Create the SVG container.\n  const svg = d3.create('svg')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('viewBox', [0, 0, width, height])\n    .attr('style', 'max-width: 100%; height: auto;');\n\n  // Add the x-axis.\n  svg.append('g')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0))\n    .call(g => g.append('text')\n      .attr('x', width - marginRight)\n      .attr('y', -4)\n      .attr('fill', 'currentColor')\n      .attr('text-anchor', 'end')\n      .text('Date →'));\n\n  // Add the y-axis.\n  svg.append('g')\n    .attr('transform', `translate(${marginLeft},0)`)\n    .call(d3.axisLeft(y).ticks(height / 40))\n    .call(g => g.select('.domain').remove())\n    .call(g => g.selectAll('.tick line').clone()\n      .attr('x2', width - marginLeft - marginRight)\n      .attr('stroke-opacity', 0.1))\n    .call(g => g.append('text')\n      .attr('x', -marginLeft)\n      .attr('y', 10)\n      .attr('fill', 'currentColor')\n      .attr('text-anchor', 'start')\n      .text('↑ Close Price ($)'));\n\n  // Create line generator\n  const line = d3.line()\n    .x(d => x(d.Date))\n    .y(d => y(d.Close));\n\n  // Add lines for each company\n  svg.append('g')\n    .attr('fill', 'none')\n    .attr('stroke-width', 1.5)\n    .attr('stroke-linejoin', 'round')\n    .attr('stroke-linecap', 'round')\n    .selectAll('path')\n    .data(groupedData)\n    .join('path')\n      .attr('stroke', (_, i) => d3.schemeCategory10[i])\n      .attr('d', ([_, values]) => line(values));\n\n  // Add a legend\n  const legend = svg.append('g')\n    .attr('font-family', 'sans-serif')\n    .attr('font-size', 10)\n    .attr('text-anchor', 'end')\n    .selectAll('g')\n    .data(groupedData)\n    .join('g')\n      .attr('transform', (_, i) => `translate(${width},${i * 20 + 10})`);\n\n  legend.append('rect')\n    .attr('x', -19)\n    .attr('width', 19)\n    .attr('height', 19)\n    .attr('fill', (_, i) => d3.schemeCategory10[i]);\n\n  legend.append('text')\n    .attr('x', -24)\n    .attr('y', 9.5)\n    .attr('dy', '0.35em')\n    .text(([company]) => company);\n\n  return svg.node();\n}"
}
